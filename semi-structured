-- This shows an example of consuming JSON semi-structured data in Snowflake

create or replace database query_json;
use schema public;

create or replace table car_sales
(
  src variant
)
as
select parse_json(column1) as src
from values
('{
    "date" : "2017-04-28",
    "dealership" : "Valley View Auto Sales",
    "salesperson" : {
      "id": "55",
      "name": "Frank Beasley"
    },
    "customer" : [
      {"name": "Joyce Ridgely", "phone": "16504378889", "address": "San Francisco, CA"}
    ],
    "vehicle" : [
      {"make": "Honda", "model": "Civic", "year": "2017", "price": "20275", "extras":["ext warranty", "paint protection"]}
    ]
}'),
('{
    "date" : "2017-04-28",
    "dealership" : "Tindel Toyota",
    "salesperson" : {
      "id": "274",
      "name": "Greg Northrup"
    },
    "customer" : [
      {"name": "Bradley Greenbloom", "phone": "12127593751", "address": "New York, NY"}
    ],
    "vehicle" : [
      {"make": "Toyota", "model": "Camry", "year": "2017", "price": "23500", "extras":["ext warranty", "rust proofing", "fabric protection"]}
    ]
}') v;

select src from car_sales;

-- query shown in different ways 
-- it could have even been a view
select src:salesperson.name from car_sales;
select src['salesperson']['name'] from car_sales;

-- Retrieving a Single Instance of a Repeating Element
-- Retrieve a specific numbered instance of a child element in a repeating array by adding a numbered predicate (starting from 0) to the array reference.
-- Note that to retrieve all instances of a child element in a repeating array, it is necessary to flatten the array. See an example in Using the FLATTEN Function to Parse Arrays in this topic.
-- Get the vehicle details for each sale:

select src:vehicle[0] from car_sales;
-- Get the price of each car sold:
select src:vehicle[0].price from car_sales;

-- Explicitly Casting Values
-- By default, values retrieved from a VARIANT column are returned as string literals. To avoid unexpected results, explicitly cast the values to the desired data type (using :: notation).
-- Get the list of salesperson ID numbers as string values:
select src:salesperson.id::string from car_sales;

-- Using the FLATTEN Function to Parse Arrays
-- Parse an array using the FLATTEN function. FLATTEN is a table function that produces a lateral view of a VARIANT, OBJECT, or ARRAY column. The function returns a row for each object, and the LATERAL modifier joins the data with any information outside of the object.
-- Get the names and addresses of all customers. Cast the VARIANT output to string values:
select
  value:name::string as "Customer Name",
  value:address::string as "Address"
  from
    car_sales
  , lateral flatten(input => src:customer);

-- Using the FLATTEN Function to Parse Nested Arrays
-- The extras array is nested within the vehicle array in the sample data:
-- Add a second FLATTEN clause to flatten the extras array within the flattened vehicle array and retrieve the "extras" purchased for each car sold:
select
  vm.value:make::string as make,
  vm.value:model::string as model,
  ve.value::string as "Extras Purchased"
  from
    car_sales
  , lateral flatten(input => src:vehicle) vm
  , lateral flatten(input => vm.value:extras) ve;
  
  -- infer schema https://docs.snowflake.com/en/sql-reference/functions/infer_schema.html will will want in avro 
  -- or parque schema. 
